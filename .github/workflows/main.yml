# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]
    types: [opened]
  issue_comment:
    types: [created]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: 'Check for build command'
        id: build
        uses: eliasmelgaco/pull-request-comment-trigger@v2.0.0
        with:
          trigger: '@build:**'
          allow_arguments: true

      - name: 'Parse build arguments'
        run: |
          echo 'Found it!'
          echo 'Deploy on ${{ fromJson(steps.build.outputs.arguments)[0] }}'
        if: steps.build.outputs.triggered == 'true'

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        if: steps.build.outputs.triggered == 'true'
      
      - name: 'Login to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
        if: steps.build.outputs.triggered == 'true'
          
      - name: 'Build and push image'
        run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
        if: steps.build.outputs.triggered == 'true'